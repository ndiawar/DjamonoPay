# :pushpin: MiniBank

![Logo de MiniBank](https://via.placeholder.com/150)

## :pencil: Description du projet
MiniBank est une plateforme web de gestion de transactions financières conçue pour une petite structure de transfert d’argent. Elle permet aux clients de déposer, retirer et transférer des fonds de manière sécurisée. La plateforme comprend des fonctionnalités adaptées pour les agents, distributeurs et clients afin de gérer efficacement les comptes et les transactions.

## :dart: Fonctionnalités

### :lock: **Fonctionnalités Agent** :
- Créer et gérer des comptes pour les clients et les distributeurs.
- Modifier ou bloquer des comptes en fonction des besoins.
- Crédits sur les comptes distributeurs.
- Annulation des transactions côté client.

### :briefcase: **Fonctionnalités Distributeur** :
- Créditer les comptes clients et effectuer des retraits en toute sécurité.
- Accéder en temps réel au solde et à l’historique des transactions.
- Annuler une transaction et gérer les bonus de 1% par transaction effectuée.

### :bust_in_silhouette: **Fonctionnalités Client** :
- Accès à un QR code unique pour visualiser le numéro de compte.
- Visualiser et masquer le solde du compte.
- Effectuer des transferts avec des frais de 2%.
- Visualiser l’historique des transactions (dépôts et retraits).

## :tools: Outils et Technologies
- **Framework** : Laravel
- **Frontend** : HTML, CSS, JavaScript, Framework CSS (à définir)
- **Backend** : PHP (Laravel)
- **Base de données** : SGBD (à définir)
- **WebSocket** : Pour la communication en temps réel

## :rocket: Installation et Configuration

1. **Prérequis** :
   - PHP 8.x ou plus récent
   - Composer
   - Serveur web (Apache/Nginx)
   - SGBD (MySQL/PostgreSQL)

2. **Installation** :
   ```bash
   git clone https://github.com/ndiawar/minibank.git
   cd minibank
   composer install
   cp .env.example .env
   php artisan key:generate
   ```

3. **Configuration de la base de données** :
   - Mettez à jour les informations de connexion à la base de données dans le fichier `.env`.

   ```env
   DB_CONNECTION=mysql
   DB_HOST=127.0.0.1
   DB_PORT=3306
   DB_DATABASE=nom_bdd
   DB_USERNAME=nom_utilisateur
   DB_PASSWORD=mot_de_passe
   ```

4. **Migration des tables** :
   ```bash
   php artisan migrate
   ```

5. **Démarrage de l'application** :
   ```bash
   php artisan serve
   ```

## :books: Documentation Technique

La documentation technique inclut les aspects suivants :

- **UML** : Diagrammes de classes, cas d’utilisation, et séquence.
- **Sécurité** : Mécanismes de sécurité pour la protection des données.
- **Architecture** : Description de l’architecture backend et des services frontaux.

Les fichiers UML et d'autres ressources sont disponibles dans le dossier `docs/`.

## :test_tube: Tests et Contribution

### :jigsaw: Tests

- Lancer les tests unitaires avec :
  ```bash
  php artisan test
  ```

### :handshake: Contribution

1. Forkez le projet
2. Créez une branche de fonctionnalité (`git checkout -b feature/AmazingFeature`)
3. Committez vos changements (`git commit -m 'Add some AmazingFeature'`)
4. Pushez vers la branche (`git push origin feature/AmazingFeature`)
5. Ouvrez une Pull Request

## :e_mail: Contact

Pour toute question ou demande, veuillez contacter l’équipe projet :

- **Chef de projet** : Ma Khady Laye Diaw - makhadypro@gmail.com
- **Développeurs** :
  - Fatou Kiné Diakité - fatoukinediakite717@gmail.com
  - Ndiawar Diop - dndiawar20@gmail.com
  - Mamadou Lamine Niassy - niassy.lamine10@gmail.com
